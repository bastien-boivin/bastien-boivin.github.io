{"Notes/Linux/deb":{"slug":"Notes/Linux/deb","filePath":"Notes/Linux/deb.md","title":"deb","links":[],"tags":[],"content":""},"Notes/Profil/Profil":{"slug":"Notes/Profil/Profil","filePath":"Notes/Profil/Profil.md","title":"Profil","links":[],"tags":["profil","cv"],"content":"🎓 Formation &amp; Recherche\n\n\n                  \n                  Thèse de Doctorat (2024-2027) - Lien\n                  \n                \n\n\nUniversité de Rennes • Géosciences Rennes (UMR 6118)\nTitre : « Intégration de la modélisation de l’impact du changement climatique sur la ressource en eau au sein des outils de gestion prévisionnelle de la production d’eau potable : exemple du Bassin Rennais »\nEncadrement :\n\nJean-Raynald de Dreuzy (Géosciences Rennes)\nLuc Aquilina (Géosciences Rennes)\nJean-Yves Gaubert (SPL Eau du Bassin Rennais)\n\nFinancement : Thèse ”CIFRE” financée par Eau du Bassin Rennais dans le cadre de la Chaire Eaux et Territoires (phase II)\nÉquipe : Eaux et Territoires\n\n\n\n\n💼 Expérience Professionnelle\n🖥️ Doctorant en Modélisation Hydrogéologique\nUniversité de Rennes • Oct. 2024 - Sept. 2027\nDéveloppement de modèles couplés surface-souterrain pour évaluer l’impact du changement climatique sur la ressource en eau. Contribution active aux projets HydroModPy et GeoP4th.\n💧 Alternant Ingénieur Hydrogéologue\nBRGM Bretagne • Sept. 2023 - Sept. 2024\nContribution au SIGES Bretagne, synthèse des paramètres hydrodynamiques, cartographie des périmètres de protection, élaboration d’itinéraires hydrogéologiques.\n💧 Stagiaire Ingénieur Hydrogéologue\nBRGM Bretagne • Mai 2023 - Août 2023\nInitiation aux méthodes d’investigation hydrogéologique et participation aux projets de recherche du service géologique régional.\n\n🚀 Projets de Recherche\n\n  \n    \n      \n      \n        HydroModPy\n        Boîte à outils Python pour la modélisation hydrogéologique\n      \n    \n    Contribution active durant ma thèse au développement de la modélisation des réservoirs et lacs. HydroModPy automatise le déploiement de modèles d&#039;eaux souterraines à l&#039;échelle des bassins versants.\n    Co-auteur\n    MODFLOW\n    Python\n  \n  \n    \n      \n      \n        GeoP4th\n        Plateforme de traitement de trajectoires spatio-temporelles\n      \n    \n    Développement d&#039;outils pour l&#039;analyse des trajectoires dans le cadre de mes recherches sur les interactions surface-subsurface. Contribution aux modules de traitement des données spatio-temporelles.\n    Contributeur\n    Géospatial\n    Python\n  \n\n\n📝 Publications &amp; Communications\n\n\n                  \n                  📝 HydroModPy: A Python toolbox for deploying catchment-scale shallow groundwater models \n                  \n                \n\n\nPreprint • EGUsphere (2025)\nAuteurs : A. Gauvain, R. Abhervé, A. Coche, M. Le Mesnil, C. Roques, C. Bouchez, S. Leray, E. Marti, R. Figueroa, E. Bresciani, C. Vautier, B. Boivin, et al.\nPrésentation d’une boîte à outils Python open-source pour automatiser le déploiement de modèles d’eaux souterraines à l’échelle des bassins versants.\n→ Lire le preprint\n\n\n\n\n\n                  \n                  🗣️ Coupled surface-water and groundwater modeling approach to optimize drinking-water dam management \n                  \n                \n\n\nAbstract accepté • OZCAR TERENO 2025\nAuteurs : B. Boivin, A. Coche, R. Abhervé, R. Guillossou, J.-Y. Gaubert, L. Aquilina, J.-R. De Dreuzy\nPrésentation de l’approche de modélisation couplée développée pour optimiser la gestion des barrages d’eau potable sous l’impact du changement climatique.\nConférence : Paris, 29 septembre - 2 octobre 2025\nFocus : Barrage de Chèze (Bretagne) - Modélisation des interactions surface-subsurface pour 500 000 habitants de la métropole rennaise\n\n\n\n\n🎯 Objectifs de Recherche\nAxes principaux :\n\n🔄 Interactions surface-subsurface\n🌡️ Modélisation des impacts climatiques sur la disponibilité des ressources\n🛠️ Développement d’outils pour la communauté scientifique et opérationnelle\n📊 Aide à la décision pour les gestionnaires de ressources en eau\n\n\n🔗 Contact &amp; Liens\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n  \n    🏛️\n    Mail professionnel\n  \n  \n    📧\n    Mail personnel\n  \n"},"Notes/Python/Fichier-d'installation":{"slug":"Notes/Python/Fichier-d'installation","filePath":"Notes/Python/Fichier d'installation.md","title":"Fichiers d'installation yml | txt | ...","links":["Notes/Python/Gestion-des-environnements","Notes/Python/Packages-Python","Notes/Python/pyproject.toml"],"tags":["python","configuration","yml","yaml","requirements","toml"],"content":"\n\n                  \n                  Information \n                  \n                \n\n\nCette notes est une compilation d’explication déjà contenu dans les notes Gestion des environnements, Packages Python et pyproject.toml et présente des exemples d’utilisation / construction de fichier d’installation\n\n\n\n🐍 environment.yml - Environnements conda\n📋 Structure complète\nname: mon_projet_geo\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  # Version Python\n  - python=3.11\n  \n  # Packages scientifiques de base\n  - numpy&gt;=1.24.0\n  - pandas&gt;=2.0.0\n  - matplotlib&gt;=3.7.0\n  \n  # Packages géospatiaux (meilleurs avec conda)\n  - geopandas&gt;=0.13.0\n  - rasterio&gt;=1.3.0\n  - fiona&gt;=1.9.0\n  - shapely&gt;=2.0.0\n  - gdal&gt;=3.6.0\n  \n  # Outils de développement\n  - jupyter\n  - ipykernel\n  \n  # Gestionnaire pip\n  - pip\n  \n  # Packages uniquement disponibles via pip\n  - pip:\n    - streamlit&gt;=1.25.0\n    - plotly&gt;=5.15.0\n    - kaleido  # pour export plotly\n    - git+github.com/user/dev_package.git\n    - -e ./local_package\n \n# Variables d&#039;environnement (optionnel)\nvariables:\n  - GDAL_DATA: $CONDA_PREFIX/share/gdal\n  - PROJ_LIB: $CONDA_PREFIX/share/proj\n  - PYTHONPATH: $CONDA_PREFIX/lib/python3.11/site-packages\n \n# Préfixe personnalisé (optionnel)\nprefix: /opt/conda/envs/mon_projet_geo\n🎯 Cas d’usage\nUtilisez environment.yml pour :\n\nProjets avec packages scientifiques/géospatiaux\nReproduction exacte d’environnements\nDépendances système complexes (GDAL, OpenCV, etc.)\nCollaboration en équipe\n\n\n📄 requirements.txt - Dépendances pip\n\n\n                  \n                  Installation avec pip \n                  \n                \n\n\nPour les détails d’installation et gestion des packages pip, voir Installation avec Pip\n\n\n\n📝 Formats et syntaxe\n# requirements.txt basique\nnumpy&gt;=1.24.0\npandas&gt;=2.0.0,&lt;3.0.0\nmatplotlib==3.7.2\nrequests~=2.31.0\n \n# Avec commentaires\n# Base scientifique\nnumpy&gt;=1.24.0    # Arrays\npandas&gt;=2.0.0    # DataFrames\n \n# Visualisation\nmatplotlib&gt;=3.7.0\nplotly&gt;=5.15.0\n \n# Web\nfastapi&gt;=0.100.0\nuvicorn[standard]&gt;=0.23.0\n \n# Développement\npytest&gt;=7.4.0\nblack&gt;=23.0.0\nmypy&gt;=1.5.0\n🔗 Sources diverses\n# Depuis PyPI (défaut)\nrequests&gt;=2.31.0\n \n# Depuis Git\ngit+github.com/user/repo.git\ngit+github.com/user/repo.git@v1.0.0\ngit+github.com/user/repo.git@main\n \n# Package local en mode éditable\n-e .\n-e ./path/to/package\n \n# Depuis URL directe\ngithub.com/user/repo/archive/main.zip\n \n# Depuis fichier local\n./packages/my_package-1.0.0-py3-none-any.whl\n📚 Organisation modulaire\n# Structure organisée\nrequirements/\n├── base.txt          # Dépendances communes\n├── dev.txt           # Développement\n├── prod.txt          # Production\n├── test.txt          # Tests\n└── docs.txt          # Documentation\n# requirements/base.txt\nnumpy&gt;=1.24.0\npandas&gt;=2.0.0\nrequests&gt;=2.31.0\n \n# requirements/dev.txt\n-r base.txt\npytest&gt;=7.4.0\nblack&gt;=23.0.0\nmypy&gt;=1.5.0\njupyter&gt;=1.0.0\n \n# requirements/prod.txt\n-r base.txt\ngunicorn&gt;=21.0.0\npsycopg2-binary&gt;=2.9.0\n🎯 Cas d’usage\nUtilisez requirements.txt pour :\n\nProjets Python pur sans dépendances complexes\nDéploiement en production\nCI/CD et conteneurs Docker\nPackages disponibles uniquement sur PyPI\n\n\n🔗 Comparatif des formats\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAspectenvironment.ymlrequirements.txtpyproject.tomlGestionnaireconda/mambapippip + outils modernesEnvironnements✅ Gestion complète❌ Packages seulement❌ Packages seulementDépendances système✅ Binaires pré-compilés❌ Compilation locale❌ Compilation localeMulti-langage✅ Python, R, C++, etc.❌ Python seulement❌ Python seulementMétadonnées projet❌❌✅ ComplètesStandard moderne❌❌✅ PEP 518/621\n\n🔗 Intégration et workflow\n🏗️ Workflow recommandé\n# 1. Développement avec environment.yml\nconda env create -f environment.yml\nconda activate mon_projet\n \n# 2. Configuration du projet avec pyproject.toml\npip install -e .[dev]\n\n📚 Ressources\n📖 Documentation\n\nConda environment.yml\nPip requirements\n"},"Notes/Python/Gestion-des-environnements":{"slug":"Notes/Python/Gestion-des-environnements","filePath":"Notes/Python/Gestion des environnements.md","title":"Gestion des environnements","links":["Notes/Python/Packages-Python","Notes/Python/Fichier-d'installation"],"tags":["python","conda","mamba","environnements"],"content":"🐍 Gestion des environnements Python\nLa gestion des environnements Python est cruciale pour maintenir des projets isolés et reproductibles. Plusieurs solutions existent : venv, virtualenv, pipenv, poetry, conda, mamba…\nDans cette note, je me concentre sur conda et mamba qui sont particulièrement adaptés pour mon utilisation (datasciences) et les projets présentant des inter-dépendances complexes.\n\n\n                  \n                  Note complémentaire \n                  \n                \n\n\nPour la gestion des packages dans les environnements (conda et pip), voir : Packages Python\n\n\n\n\n📦 Conda : Les fondamentaux\n🔗 Documentation officielle de conda\n🧪 Gestion des environnements\nCréer un environnement\n# Environnement basique\nconda create -n mon_env python=3.13.2\n \n# Avec des packages spécifiques\nconda create -n mon_env python=3.13.2 numpy pandas matplotlib\n \n# Depuis un canal spécifique\nconda create -n mon_env -c conda-forge python=3.13.2 geopandas\n \n# Depuis un dossier spécifique\nconda create -p ./envs/mon_env python=3.11\n \n# Cloner un environnement existant\nconda create -n clone_env --clone mon_env\nActiver/Désactiver\n# Activer\nconda activate mon_env\n \n# Désactiver\nconda deactivate\n \n# Lister les environnements\nconda env list\n# ou\nconda info --envs\n \n# Afficher l&#039;environnement actuel\necho $CONDA_DEFAULT_ENV\nInformations sur l’environnement\n# Détails de l&#039;environnement actif\nconda info\n \n# Packages installés dans l&#039;environnement\nconda list\n \n# Historique des modifications\nconda list --revisions\n \n# Revenir à une révision précédente\nconda install --revision 2\nSupprimer un environnement\nconda remove -n mon_env --all\n \n# Supprimer un environnement par chemin\nconda env remove -p ./envs/mon_env\n📋 Environnements reproductibles\n\n\n                  \n                  Voir la note Fichier d&#039;installation qui présente les différents formats, yml | yaml | txt | etc...\n                  \n                \n\nCréer depuis un fichier YML\n# Créer depuis environment.yml\nconda env create -f environment.yml\n \n# Spécifier un nom différent\nconda env create -f environment.yml -n nouveau_nom\n \n# Mettre à jour un environnement existant\nconda env update -f environment.yml --prune\n\n\n                  \n                  L&#039;option --prune fait en sorte que la conda élimine toute dépendance qui n&#039;est plus nécessaire de l&#039;environnement lors de la mise à jours.\n                  \n                \n\nStructure d’un fichier environment.yml\nname: mon_projet\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.11\n  - numpy&gt;=1.24\n  - pandas\n  - matplotlib\n  - geopandas\n  - pip\n  - pip:\n    - requests\n    - some-pip-only-package\nvariables:\n  - VAR_NAME: value\nprefix: /path/to/env  # optionnel\nExporter un environnement\n# Export complet avec hash (reproductibilité stricte)\nconda env export &gt; environment.yml\n \n# Export sans hash (multi-plateforme)\nconda env export --no-builds &gt; environment.yml\n \n# Export historique des packages installés\nconda env export --from-history &gt; environment.yml\n \n# Export avec nom personnalisé\nconda env export -n mon_env &gt; mon_projet.yml\n \n# Export type pip\nconda list --export &gt; requirements.txt\n\n\n                  \n                  Hash et reproductibilité \n                  \n                \n\n\n\nAvec hash : reproductibilité stricte, mais plateforme unique\nSans hash : plus souple, multi-plateforme\n—from-history : liste uniquement les packages explicitement installés\n\n\n\n\n🏷️ Gestion avancée\nRenommer un environnement\n# Pas de renommage direct : cloner puis supprimer l&#039;ancien\nconda create --name nouveau_nom --clone ancien_nom\nconda env remove --name ancien_nom\nVariables d’environnement\n# Définir des variables pour un environnement\nconda env config vars set VAR_NAME=value -n mon_env\n \n# Lister les variables\nconda env config vars list -n mon_env\n \n# Supprimer une variable\nconda env config vars unset VAR_NAME -n mon_env\n🧹 Nettoyage et maintenance\n# Nettoyer les packages non utilisés dans les caches\nconda clean --all\n \n# Nettoyer les paquets tarballs\nconda clean --tarballs\n \n# Nettoyer les caches de packages téléchargés\nconda clean --packages\n \n# Supprimer les index inutilisés\nconda clean --index-cache\n\n\n                  \n                  🧹 Détails sur conda clean\n                  \n                \n\n\n\n--all : supprime tout ce qui est nettoyable (à utiliser avec précaution)\n--tarballs : supprime les archives .tar.bz2 téléchargées\n\n✅ Gagne de la place disque\n⚠️ Re-téléchargement nécessaire si réinstallation\n\n\n--packages : supprime les paquets inutilisés dans le cache\n\n✅ Utile après des tests temporaires\n⚠️ Ne pas utiliser en plein développement\n\n\n--index-cache : supprime les caches des index de paquets\n\n✅ À utiliser si conda semble bloqué\n⚠️ Allonge la prochaine résolution\n\n\n\n\n\n\n⚙️ Optimiser conda : changer le solveur\n# Installer libmamba\nconda install -n base conda-libmamba-solver\n \n# L&#039;utiliser par défaut\nconda config --set solver libmamba\n \n# Vérifier la configuration\nconda config --show solver\n\n\n                  \n                  Performance Libmamba est 10 à 100 fois plus rapide que le solveur par défaut de conda.\n                  \n                \n\n\n⚡ Mamba : L’alternative rapide\n🔗 Documentation officielle de Mamba\n⚒️ Installation avec Miniforge\nMiniforge : distribution conda minimale avec mamba natif et conda-forge par défaut.\n# Linux/macOS\nwget github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\nbash Miniforge3-Linux-x86_64.sh\n \n# Ou directement avec curl\ncurl -L -O github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh\nbash Miniforge3-Linux-x86_64.sh\n\n\n                  \n                  Installation recommandée Je recommande fortement Miniforge plutôt que Anaconda ou Miniconda pour :\n                  \n                \n\n\n\nMamba intégré nativement\nConda-forge par défaut\nPas de limitations commerciales\nPlus léger qu’Anaconda\n\n\n\n\n\n\n                  \n                  Liens utiles \n                  \n                \n\n\n\nMiniforge sur GitHub\nGuide d’installation détaillé\n\n\n\n\n🔍 Comparatif Mamba vs Conda\nAvantages techniques de Mamba\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAspectCondaMambaSolveurPython (lent)C++ (jusqu’à 100x plus rapide)TéléchargementsSéquentielParallèleRAMUsage élevéOptimiséInterfaceBasiquePlus lisible avec barres de progressionRésolution conflitsParfois lenteBeaucoup plus rapide\nCompatibilité complète\nMamba est un drop-in replacement de conda :\n# Remplacez simplement &#039;conda&#039; par &#039;mamba&#039;\nmamba create -n mon_env python=3.11\nmamba install -c conda-forge geopandas\nmamba env export &gt; environment.yml\nmamba activate mon_env\nLimites actuelles\n\nQuelques options très avancées peuvent manquer\nBase d’utilisateurs plus petite (mais en croissance rapide)\nRésolution parfois légèrement différente (généralement meilleure)\nMoins de documentation disponible en ligne\n\n🛠️ Configuration recommandée - conda / mamba\n# Définir conda-forge en priorité\nmamba config --add channels conda-forge\nmamba config --set channel_priority strict\n \n# Configuration SSL si problèmes réseau\nmamba config --set ssl_verify false  # à éviter en production\n \n# Vérifier la configuration\nmamba config --show channels\nmamba config --show\n\n🎯 Workflows recommandés\n🚀 Nouveau projet (workflow optimal)\n# 1. Créer l&#039;environnement avec version Python spécifique\nconda create -n projet python=3.11\n \n# 2. Activer\nconda activate projet\n \n# 3. Installer les dépendances de base\nconda install -c conda-forge numpy pandas matplotlib\n \n# 4. Exporter pour la reproductibilité\nconda env export --no-builds &gt; environment.yml\n🔄 Reproduire un environnement\n# Créer depuis le fichier\nconda env create -f environment.yml\n \n# Ou mettre à jour un environnement existant\nconda env update -f environment.yml --prune\n \n# Activer\nconda activate nom_du_projet\n🔧 Maintenance régulière\n# Mettre à jour l&#039;environnement\nconda update --all\n \n# Exporter les changements\nconda env export --no-builds &gt; environment.yml\n \n# Nettoyer périodiquement\nconda clean --tarballs\n\n\n                  \n                  Bonnes pratiques \n                  \n                \n\n\n\nUn environnement = un projet\nNoms clairs et explicites (projet_nom_version)\nExport régulier de environment.yml\nToujours utiliser conda-forge comme canal principal\nUtiliser Mamba pour optimiser les performances\nVersionner les fichiers environment.yml (git)\n\n\n\n\n\n🔧 Résolution de problèmes courants\nEnvironnement corrompu\n# Recréer un environnement depuis l&#039;export\nconda env create -f environment.yml --force\n \n# Ou nettoyer et réinstaller\nconda clean --all\nconda env remove -n problematic_env\nconda env create -f environment.yml\nConflits de dépendances\n# Forcer la résolution avec mamba (plus efficace)\nconda install package_name --force-reinstall\n \n# Ou installer depuis un canal spécifique\nconda install -c conda-forge package_name\nProblèmes de performance\n# Passer à libmamba si vous utilisez encore conda\nconda config --set solver libmamba\n \n# Ou migrer vers mamba/miniforge (recommandé)\n\n📚 Ressources supplémentaires\nDocumentation officielle\n\nDocumentation Conda\nDocumentation Mamba\nGuide Conda-forge\n\nGuides et cheat sheets\n\nCheat sheet Conda\nGuide migration vers Mamba\n"},"Notes/Python/Packages-Python":{"slug":"Notes/Python/Packages-Python","filePath":"Notes/Python/Packages Python.md","title":"Packages Python","links":["Notes/Python/Gestion-des-environnements"],"tags":["python","conda","mamba","pip","packages","librairies"],"content":"📦 Gestion des packages Python\nCette note complète le guide sur la Gestion des environnements en détaillant l’installation et la gestion des packages dans les environnements conda/mamba.\n\n🔍 Conda vs Pip : Comprendre les différences\n🏗️ Architecture et fonctionnement\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAspectCondaPipGestionnairePackages + environnementsPackages uniquementDépendancesBinaires pré-compiléesSource + compilationLangagesPython, R, C++, Fortran…Python uniquementInstallationBinaires optimisésCompilation locale possible\n🎯 Quand utiliser quoi ?\nPréférer Conda/Mamba pour :\n\nPackages scientifiques (numpy, scipy, pandas, matplotlib)\nLibrairies géospatiales (GDAL, GEOS, PROJ)\nDépendances complexes (OpenCV, TensorFlow, PyTorch)\nPackages avec extensions C (lxml, Pillow, psycopg2)\n\nUtiliser Pip pour :\n\nPackages Python pur sans dépendances complexes\nPackages non disponibles sur conda-forge\nVersions de développement depuis Git\nPackages locaux en mode éditable\n\n\n🛠️ Installation avec Conda/Mamba\n\n\n                  \n                  Possible de remplacer conda par mamba comme expliqué dans Compatibilité complète à lire\n                  \n                \n\n📥 Installation basique\n# Package simple\nconda install numpy\n \n# Version spécifique\nconda install numpy=1.24.0\nconda install &quot;numpy&gt;=1.24,&lt;1.25&quot;\n \n# Canal spécifique (recommandé : conda-forge)\nconda install -c conda-forge geopandas\n \n# Plusieurs packages\nconda install -c conda-forge numpy pandas matplotlib geopandas\n🌐 Gestion des canaux\n\n\n                  \n                  Possible de le géré par défaut, voir Gestion des environnements\n                  \n                \n\n# Ajouter un canal\nconda config --add channels conda-forge\n \n# Priorité des canaux\nconda config --set channel_priority strict\n \n# Lister les canaux configurés\nconda config --show channels\n \n# Installer depuis un canal spécifique sans l&#039;ajouter\nconda install -c conda-forge package_name\n \n# Ordre de priorité des canaux (par défaut)\nconda config --add channels defaults\nconda config --add channels conda-forge  # Plus prioritaire\n\n\n                  \n                  Canaux recommandés \n                  \n                \n\n\n\nconda-forge : canal communautaire de référence\ndefaults : canal officiel Anaconda\npytorch : pour PyTorch et dépendances\n\n\n\n\n🔄 Mise à jour et suppression\n# Mettre à jour un package\nconda update numpy\n \n# Mettre à jour tous les packages\nconda update --all\n \n# Supprimer un package\nconda remove numpy\n \n# Supprimer avec dépendances inutilisées\nconda remove numpy --force-remove\n \n# Lister les packages installés\nconda list\nconda list numpy  # recherche spécifique\n🔍 Recherche de packages\n# Rechercher un package\nconda search numpy\n \n# Rechercher dans un canal spécifique\nconda search -c conda-forge gdal\n \n# Informations détaillées sur un package\nconda info numpy\n \n# Voir les dépendances d&#039;un package\nconda depends numpy\n\n🐍 Installation avec Pip\n📦 Installation depuis PyPI\n# Installation basique\npip install requests\n \n# Version spécifique\npip install numpy==1.24.0\npip install &quot;numpy&gt;=1.24,&lt;1.25&quot;\n \n# Plusieurs packages\npip install requests beautifulsoup4 lxml\n \n# Depuis requirements.txt\npip install -r requirements.txt\n🔗 Installation depuis Git\n# Depuis une branche spécifique\npip install git+github.com/user/repo.git@branch_name\n \n# Depuis un tag\npip install git+github.com/user/repo.git@v1.0.0\n \n# Depuis un commit spécifique\npip install git+github.com/user/repo.git@abc123\n \n# Avec SSH (si configuré)\npip install git+ssh://git@github.com/user/repo.git\n \n# Depuis GitLab ou autres\npip install git+gitlab.com/user/repo.git\n🏠 Installation en mode développement\n# Installation locale éditable (mode développement)\npip install -e .\n \n# Avec des dépendances optionnelles\npip install -e .[dev]\npip install -e .[test,docs]\n \n# Depuis un autre répertoire\npip install -e ./path/to/package\n \n# Désinstaller un package en mode éditable\npip uninstall package_name\n🔧 Options avancées de Pip\n# Installation sans cache\npip install --no-cache-dir package_name\n \n# Installation sans dépendances\npip install --no-deps package_name\n \n# Installation dans un répertoire spécifique\npip install --target ./lib package_name\n \n# Forcer la réinstallation\npip install --force-reinstall package_name\n \n# Installation depuis un fichier wheel local\npip install ./package-1.0-py3-none-any.whl\n \n# Télécharger sans installer\npip download package_name\n\n🌍 Packages géospatiaux : cas particuliers\n🗺️ GDAL et écosystème géospatial\nLes packages géospatiaux ont des dépendances complexes (GDAL, GEOS, PROJ, etc.). Conda est fortement recommandé :\n# Installation recommandée avec mamba\nconda install -c conda-forge gdal geos proj\n \n# Package géospatiaux populaires\nconda install -c conda-forge geopandas rasterio fiona shapely\n\n\n                  \n                  Installer GDAL avec pip peut être très problématique :\n                  \n                \n\n\n\nCompilation complexe\nDépendances système requises\nVersions incompatibles fréquentes\n\nUtilisez toujours conda/mamba pour GDAL !\n\n\n\n\n🔄 Stratégies de gestion hybride Conda + Pip\n📋 Ordre d’installation recommandé\n# 1. D&#039;abord, installer les packages scientifiques/géospatiaux avec conda\nconda install -c conda-forge numpy pandas geopandas matplotlib\n \n# 2. Ensuite, compléter avec pip pour les packages purs Python [ou conda]\npip install requests beautifulsoup4 streamlit\n \n# 3. Packages de développement depuis Git\npip install git+github.com/user/dev_package.git\n📝 Fichier environment.yml hybride\nname: projet_geo\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  # Packages conda (prioritaires)\n  - python=3.11\n  - numpy\n  - pandas\n  - geopandas\n  - matplotlib\n  - jupyter\n  - streamlit\n  - requests\n  # Packages pip\n  - pip\n  - pip:\n    - git+github.com/user/custom_package.git\n    - -e ./local_package  # package local en mode éditable\n\n\n                  \n                  Bonnes pratiques hybrides \n                  \n                \n\n\n\nToujours installer conda packages en premier\nPip en complément pour les packages non disponibles\nÉviter de mélanger conda et pip pour le même package\nExporter régulièrement avec conda env export\n\n\n\n\n\n🔧 Résolution de conflits et problèmes\n⚠️ Conflits de dépendances\n# Diagnostiquer les conflits\nconda list --show-channel-urls\n \n# Forcer la résolution avec mamba\nconda install package_name --force-reinstall\n \n# Spécifier explicitement les canaux\nconda install -c conda-forge -c defaults package_name\n \n# En dernier recours : nettoyer et recréer\nconda env remove -n env_name\nconda env create -f environment.yml\n🧹 Nettoyage des packages\n# Conda/Mamba\nconda clean --packages --tarballs\n \n# Pip\npip cache purge\n \n# Voir l&#039;espace utilisé\npip cache info\n\n📊 Monitoring et audit des packages\n🔍 Informations sur les packages\n# Détails d&#039;un package conda\nconda info package_name\n \n# Historique des installations\nconda list --revisions\n \n# Packages pip avec leurs dépendances\npip show package_name\n \n# Arbre des dépendances (avec pipdeptree)\npip install pipdeptree\npipdeptree\n🔐 Sécurité et vulnérabilités\n# Audit de sécurité avec pip-audit\npip install pip-audit\npip-audit\n \n# Vérification des packages obsolètes\npip list --outdated\n \n# Mise à jour sécurisée\npip install --upgrade package_name\n\n🔗 Ressources et documentation\n📖 Documentation officielle\n\nConda packages\nPip user guide\nConda-forge documentation\n\n🛠️ Outils utiles\n\nconda-tree : visualiser l’arbre des dépendances\npipdeptree : arbre des dépendances pip\npip-audit : audit de sécurité\n"},"Notes/Python/Python-Hub":{"slug":"Notes/Python/Python-Hub","filePath":"Notes/Python/Python Hub.md","title":"Python Hub","links":["Notes/Python/Gestion-des-environnements","Notes/Python/Packages-Python","Notes/Python/Fichier-d'installation","Notes/Python/pyproject.toml"],"tags":["python","index"],"content":"🗺️ Navigation\n🏗️ Gestion des environnements\n\nConda, Mamba et isolation des projets\n\nContenu : Créer/gérer des environnements, optimisation avec Mamba, reproductibilité avec environment.yml, workflows et bonnes pratiques.\nPour : Débuter un projet, isoler les dépendances, collaborer en équipe.\n\n📦 Packages Python\n\nInstallation et gestion des dépendances\n\nContenu : Conda vs Pip, installation depuis PyPI/Git, stratégies hybrides, résolution de conflits, packages géospatiaux.\nPour : Installer des librairies, gérer les dépendances, résoudre les conflits.\n\n📄 Fichier d’installation\n\nFormats de configuration : yml, txt, toml\n\nContenu : Environment.yml (conda), requirements.txt (pip), comparatif des formats, organisation modulaire des dépendances.\nPour : Partager un projet, déploiement, reproductibilité multi-plateforme.\n\n⚙️ pyproject.toml\n\nConfiguration moderne des projets Python\n\nContenu : Standard PEP 518/621, métadonnées projet, dépendances optionnelles, intégration setuptools.\nPour : Développer un package, configuration professionnelle, publication PyPI."},"Notes/Python/pyproject.toml":{"slug":"Notes/Python/pyproject.toml","filePath":"Notes/Python/pyproject.toml.md","title":"Configuration de pyproject.toml","links":["Notes/Python/Packages-Python","Notes/Python/Fichier-d'installation"],"tags":["python","pyproject","toml","configuration","projet"],"content":"🚀 Configuration avec pyproject.toml\nLe fichier pyproject.toml est le standard moderne pour configurer un projet Python (PEP 518, 621, 660). Il remplace setup.py par une approche déclarative plus sûre et lisible.\n\n\n                  \n                  Cette note nécessite une bonne compréhension des environnements Python, de la gestion de versions, des paquets, de la gestion de dépôts, etc. Elle liste l&#039;ensemble des possibilités présentes dans les fichiers .toml (que j&#039;utilise personnellement). La maîtrise de Packages Python, Fichier d&#039;installation est requise.\n                  \n                \n\n\n🏗️ Structure fondamentale\n📦 Section [build-system]\n[build-system]\nrequires = [\n    &quot;setuptools&gt;=64&quot;,\n    &quot;wheel&quot;,\n    &#039;tomli; python_version &lt; &quot;3.11&quot;&#039;  # support TOML pour Python &lt; 3.11\n]\nbuild-backend = &quot;setuptools.build_meta&quot;\n🏷️ Section [project] - Métadonnées\n[project]\nname = &quot;mon_projet_geo&quot;\nversion = &quot;0.1.0&quot;\ndescription = &quot;Projet de géosciences avec Python&quot;\nreadme = &quot;README.md&quot;\nlicense = { file = &quot;LICENSE&quot; }\nrequires-python = &quot;&gt;=3.11&quot;\n \nauthors = [\n    { name = &quot;Bastien Boivin&quot;, email = &quot;bastien.boivin@univ-rennes.fr&quot; },\n]\n \nkeywords = [\n    &quot;géosciences&quot;, &quot;python&quot;, &quot;data analysis&quot;,\n    &quot;GIS&quot;, &quot;hydrology&quot;\n]\n \nclassifiers = [\n    &quot;Programming Language :: Python :: 3&quot;,\n    &quot;Programming Language :: Python :: 3.11&quot;,\n    &quot;License :: OSI Approved :: MIT License&quot;,\n    &quot;Operating System :: OS Independent&quot;,\n    &quot;Intended Audience :: Science/Research&quot;,\n    &quot;Topic :: Scientific/Engineering :: GIS&quot;\n]\n\n\n                  \n                  Classifiers \n                  \n                \n\n\nQu’est-ce que les classifiers ?\nLes classifiers sont des métadonnées standardisées qui décrivent un package Python sur PyPI. Ils fonctionnent comme des “étiquettes” qui aident à :\n\nCatégoriser le projet\nFaciliter la recherche et le filtrage\nInformer les utilisateurs sur la compatibilité\nAméliorer la visibilité du package\n\nStructure des classifiers\nLes classifiers suivent une hiérarchie à plusieurs niveaux séparés par :: :\nCatégorie :: Sous-catégorie :: Détail\n\nPrincipales catégories\nProgramming Language\n&quot;Programming Language :: Python :: 3&quot;\n&quot;Programming Language :: Python :: 3.11&quot;\n&quot;Programming Language :: Python :: 3.12&quot;\nSpécifie les versions Python supportées\nLicense\n&quot;License :: OSI Approved :: MIT License&quot;\n&quot;License :: OSI Approved :: Apache Software License&quot;\n&quot;License :: OSI Approved :: GNU General Public License v3 (GPLv3)&quot;\nOperating System\n&quot;Operating System :: OS Independent&quot;\n&quot;Operating System :: Microsoft :: Windows&quot;\n&quot;Operating System :: POSIX :: Linux&quot;\n&quot;Operating System :: MacOS&quot;\nIntended Audience\n&quot;Intended Audience :: Developers&quot;\n&quot;Intended Audience :: Science/Research&quot;\n&quot;Intended Audience :: Education&quot;\n&quot;Intended Audience :: End Users/Desktop&quot;\nTopic\n&quot;Topic :: Scientific/Engineering :: GIS&quot;\n&quot;Topic :: Software Development :: Libraries :: Python Modules&quot;\n&quot;Topic :: Internet :: WWW/HTTP :: Dynamic Content&quot;\n&quot;Topic :: Database&quot;\nDevelopment Status\n&quot;Development Status :: 3 - Alpha&quot;\n&quot;Development Status :: 4 - Beta&quot;\n&quot;Development Status :: 5 - Production/Stable&quot;\nComment choisir les classifiers\n\nConsulter la liste officielle : Liste complète des classifiers PyPI\nÊtre précis : Choisir les classifiers qui décrivent réellement le projet\nPenser à l’audience : Identifier qui va utiliser le package\nInclure les versions Python : Tester et spécifier toutes les versions supportées\n\nExemple complet\nclassifiers = [\n   &quot;Development Status :: 4 - Beta&quot;,\n   &quot;Programming Language :: Python :: 3&quot;,\n   &quot;Programming Language :: Python :: 3.11&quot;,\n   &quot;Programming Language :: Python :: 3.12&quot;,\n   &quot;License :: OSI Approved :: MIT License&quot;,\n   &quot;Operating System :: OS Independent&quot;,\n   &quot;Intended Audience :: Developers&quot;,\n   &quot;Intended Audience :: Science/Research&quot;,\n   &quot;Topic :: Scientific/Engineering :: GIS&quot;,\n   &quot;Topic :: Software Development :: Libraries :: Python Modules&quot;\n]\n\n\n\n\n📚 Gestion des dépendances\n🔢 Syntaxe des versions\nOpérateurs de version\ndependencies = [\n    # Version exacte (rigide, non recommandé sauf cas particulier)\n    &quot;numpy==1.24.3&quot;,\n    \n    # Version minimale (recommandé pour stabilité)\n    &quot;pandas&gt;=2.0.0&quot;,\n    \n    # Fourchette de versions (sécurisé pour breaking changes)\n    &quot;matplotlib&gt;=3.7.0,&lt;4.0.0&quot;,\n    \n    # Version compatible (tilde) : accepte les correctifs\n    &quot;requests~=2.31.0&quot;,  # équivalent à &quot;&gt;=2.31.0,&lt;2.32.0&quot;\n    \n    # Version compatible (caret) : accepte mises à jour mineures\n    &quot;fastapi^=0.100.0&quot;,  # équivalent à &quot;&gt;=0.100.0,&lt;1.0.0&quot;\n    \n    # Excluure une version problématique\n    &quot;scipy&gt;=1.9.0,!=1.10.1&quot;,\n    \n    # Sans contrainte (à éviter en production)\n    &quot;plotly&quot;,\n]\nBonnes pratiques de versioning\ndependencies = [\n    # ✅ Version minimale stable pour packages matures\n    &quot;numpy&gt;=1.21.0&quot;,\n    \n    # ✅ Fourchette pour éviter breaking changes\n    &quot;pandas&gt;=2.0.0,&lt;3.0.0&quot;,\n    \n    # ✅ Version compatible pour packages qui suivent semver\n    &quot;pydantic~=2.5.0&quot;,\n    \n    # ❌ Version exacte (trop rigide)\n    # &quot;requests==2.31.0&quot;,\n    \n    # ❌ Sans contrainte (risqué)\n    # &quot;matplotlib&quot;,\n]\n🎯 Dependencies vs Optional Dependencies\nDependencies : Dépendances obligatoires\n[project]\ndependencies = [\n    # Packages ESSENTIELS au fonctionnement du projet\n    &quot;numpy&gt;=1.21.0&quot;,        # calculs numériques de base\n    &quot;pandas&gt;=2.0.0&quot;,        # manipulation de données\n]\n\nInstallées automatiquement avec pip install mon_projet\nIndispensables pour que le package fonctionne\nDoivent être minimales et stables\n\nOptional Dependencies : Dépendances optionnelles\n[project.optional-dependencies]\n# Groupe de développement\ndev = [\n    &quot;pytest&gt;=7.0.0&quot;,        # tests\n    &quot;black&gt;=22.0.0&quot;,        # formatage\n    &quot;mypy&gt;=1.0.0&quot;,          # vérification types\n    &quot;pre-commit&gt;=2.20.0&quot;,   # hooks git\n]\n \n# Groupe de documentation\ndocs = [\n    &quot;sphinx&gt;=5.0.0&quot;,\n    &quot;sphinx-rtd-theme&gt;=1.0.0&quot;,\n    &quot;numpydoc&quot;,\n]\n \n# Fonctionnalités spécialisées\ngeo = [\n    &quot;geopandas&gt;=0.12.0&quot;,    # données géospatiales\n    &quot;folium&gt;=0.14.0&quot;,       # cartes interactives\n    &quot;cartopy&gt;=0.21.0&quot;,      # projections cartographiques\n]\n\nInstallation optionnelle : pip install mon_projet[dev]\nFonctionnalités spécialisées non requises pour tous les utilisateurs\nOutils de développement séparés du code de production\n\nExemple d’utilisation des groupes\n# Installation de base (dependencies seulement)\npip install mon_projet\n \n# Installation avec développement\npip install mon_projet[dev]\n \n# Installation avec plusieurs groupes\npip install mon_projet[dev,docs,geo]\n \n# Installation de tous les groupes optionnels\npip install mon_projet[dev,docs,geo,ml]\n \n# En mode éditable pour développement\npip install -e .[dev,test]\n🌐 URLs du projet\n[project.urls]\nhomepage = &quot;github.com/bastien-boivin/mon_projet&quot;\nrepository = &quot;github.com/bastien-boivin/mon_projet.git&quot;\ndocumentation = &quot;mon-projet.readthedocs.io&quot;\n&quot;Bug Tracker&quot; = &quot;github.com/bastien-boivin/mon_projet/issues&quot;\ndocker = &quot;hub.docker.com/r/bastien/mon_projet&quot;\n\n🛠️ Configuration setuptools\n📦 Découverte des packages\n[tool.setuptools.packages.find]\nwhere = [&quot;.&quot;]\ninclude = [&quot;mon_projet*&quot;]\nexclude = [&quot;tests*&quot;, &quot;docs*&quot;]\n \n# Ou spécifier explicitement\n[tool.setuptools.packages]\nmon_projet = &quot;src/mon_projet&quot;\n📂 Répertoire des packages\n[tool.setuptools.package-dir]\n&quot;&quot; = &quot;src&quot;  # packages dans src/\n# ou\n&quot;&quot; = &quot;.&quot;   # packages à la racine\n📄 Fichiers de données\n[tool.setuptools.package-data]\nmon_projet = [\n    &quot;data/*.csv&quot;,\n    &quot;templates/*.html&quot;,\n    &quot;static/css/*.css&quot;,\n]\n \n# Ou globalement\n[tool.setuptools]\ninclude-package-data = true\n\n🚀 Utilisation pratique\n🔧 Installation en mode développement\n# Installation éditable avec dépendances de base\npip install -e .\n \n# Avec dépendances optionnelles\npip install -e .[dev]\npip install -e .[dev,docs,test]\n \n# Toutes les dépendances optionnelles\npip install -e .[dev,docs,test,geo]\n🔄 Intégration avec conda\n# environment.yml\nname: mon_projet\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.11\n  - numpy&gt;=1.24.0\n  - pandas&gt;=2.0.0\n  - geopandas&gt;=0.13.0\n  - pip\n  - pip:\n    - -e .  # installe le projet local via pyproject.toml\n\n🔧 Résolution de problèmes\n🚨 Erreurs courantes\n# Vérifier la syntaxe TOML\npython -c &quot;import tomli; tomli.load(open(&#039;pyproject.toml&#039;, &#039;rb&#039;))&quot;\n \n# Vérifier la configuration\npython -m setuptools check\n \n# Problème avec les dépendances dynamiques\npip install -e . --force-reinstall\n🔍 Validation et debugging\n# Installer des outils de validation\npip install validate-pyproject check-manifest\n \n# Valider le pyproject.toml\nvalidate-pyproject pyproject.toml\n \n# Vérifier les fichiers inclus\ncheck-manifest\n\n📚 Ressources\n📖 Standards PEP\n\nPEP 518 - pyproject.toml\nPEP 621 - Métadonnées projet\nPEP 660 - Installation éditable\n\n🛠️ Documentation\n\nSetuptools et pyproject.toml\nPackaging Python\nTOML specification\n"},"index":{"slug":"index","filePath":"index.md","title":"🏠 Home","links":["Notes/Profil/Profil","Notes/Python/Python-Hub","notes/linux","notes/dev","notes/sig","notes/vrac"],"tags":["home"],"content":"Actuellement en thèse de doctorat en modélisation hydrogéologique, je participe au développement d’outils Python pour automatiser le déploiement de modèles d’eaux souterraines. Dans le cadre de mes travaux de recherche, je me concentre sur l’amélioration de la représentation des interactions surface-subsurface dans les aquifères de socle cristallin.\nCe site rassemble mes notes techniques, scripts et réflexions sur la modélisation hydrogéologique, le développement Python et les outils géospatiaux.\n\n\n/* Désactive les popovers uniquement sur cette page */\n.popover {\n  display: none !important;\n}\n\n📚 Navigation\n\n  \n    👨‍🎓Profil\n  \n  \n    🐍Python\n  \n  \n    💻Linux\n  \n  \n    ⚙️Développement\n  \n  \n    🗺️SIG\n  \n  \n    🗂️Vrac\n  \n\n\n🚀 Projets de recherche\n\n  \n    \n      \n      \n        HydroModPy\n        Boîte à outils Python pour la modélisation hydrogéologique\n      \n    \n    HydroModPy automatise le déploiement de modèles d&#039;eaux souterraines. Ma contribution : développement de la modélisation des réservoirs et lacs.\n    Python\n    MODFLOW\n  \n  \n    \n      \n      \n        GeoP4th\n        Plateforme de traitement de trajectoires spatio-temporelles\n      \n    \n    Collection d&#039;outils Python pour standardiser les données spatio-temporelles. Ma contribution : développement d&#039;outils pour l&#039;analyse des trajectoires.\n    Python\n    Géospatial\n  \n\n\n🔗 Contact &amp; Liens\n\n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n  \n    \n  \n\n\n  \n    🏛️\n    Mail professionnel\n  \n  \n    📧\n    Mail personnel\n  \n"}}